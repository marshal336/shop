/**
 * Generated by orval v6.26.0 üç∫
 * Do not edit manually.
 * Shop
 * OpenAPI spec version: 1.0.0
 */
import { create } from "../schemes/api/api-instance";
import type { BodyType } from "../schemes/api/api-instance";
export interface UserDto {
  address: string;
  email: string;
  firstName: string;
  lastName: string;
  password: string;
}

export interface CreateAuthDto {
  address: string;
  email: string;
  firstName: string;
  lastName: string;
  password: string;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const authControllerRegister = (
  createAuthDto: BodyType<CreateAuthDto>,
  options?: SecondParameter<typeof create>
) => {
  return create<void>(
    {
      url: `/api/auth/sign-up`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createAuthDto,
    },
    options
  );
};

export const authControllerLogin = (
  createAuthDto: Partial<BodyType<CreateAuthDto>>,
  options?: SecondParameter<typeof create>
) => {
  return create<void>(
    {
      url: `/api/auth/log-in`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createAuthDto,
    },
    options
  );
};

export const authControllerGetNewToken = (
  options?: SecondParameter<typeof create>
) => {
  return create<void>(
    { url: `/api/auth/log-in/access-token`, method: "POST" },
    options
  );
};

export const authControllerLogout = (
  options?: SecondParameter<typeof create>
) => {
  return create<void>({ url: `/api/auth/log-out`, method: "POST" }, options);
};

export const authControllerGoogle = (
  options?: SecondParameter<typeof create>
) => {
  return create<void>(
    { url: `/api/auth/google/log-in`, method: "GET" },
    options
  );
};

export const authControllerGoogleRedirect = (
  options?: SecondParameter<typeof create>
) => {
  return create<void>(
    { url: `/api/auth/log-in/redirect`, method: "GET" },
    options
  );
};

export const userControllerGetProfile = (
  options?: SecondParameter<typeof create>
) => {
  return create<UserDto>({ url: `/api/user/profile`, method: "GET" }, options);
};

export const userControllerUpdate = (
  userDto: BodyType<UserDto>,
  options?: SecondParameter<typeof create>
) => {
  return create<void>(
    {
      url: `/api/user/update`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: userDto,
    },
    options
  );
};

export type AuthControllerRegisterResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRegister>>
>;
export type AuthControllerLoginResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogin>>
>;
export type AuthControllerGetNewTokenResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGetNewToken>>
>;
export type AuthControllerLogoutResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogout>>
>;
export type AuthControllerGoogleResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGoogle>>
>;
export type AuthControllerGoogleRedirectResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGoogleRedirect>>
>;
export type UserControllerGetProfileResult = NonNullable<
  Awaited<ReturnType<typeof userControllerGetProfile>>
>;
export type UserControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof userControllerUpdate>>
>;
